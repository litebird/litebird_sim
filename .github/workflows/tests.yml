name: Tests

on: [push]

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13]
        mpi: ["none", openmpi] # mpich
        python: ["3.10", "3.13"]
        exclude:
          - os: macos-latest
            mpi: mpich
            python: "3.10"

    # Only run tests if there is no [skipci] or [skip ci] in the commit message
    if: |
      !startsWith(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, '[skipci]')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      # Unfortunately we must use different keys to store the same data,
      # otherwise GitHub will complain when multiple jobs are going to
      # store it
      - name: Cache PySM3 data files
        id: cache-pysm3
        uses: actions/cache@v4
        with:
          path: ~/pysm3-data
          key: pysm3-data-${{ runner.os }}-${{ matrix.python }}-${{ matrix.mpi }}-${{ secrets.CACHE_VERSION }}


      - name: Register PySM3 data path
        run: |
          echo "PYSM_LOCAL_DATA=$HOME/pysm3-data" >> $GITHUB_ENV

      - name: Download PySM3 data files
        if: steps.cache-pysm3.outputs.cache_hit != 'true'
        run: |
          rm -rf "$PYSM_LOCAL_DATA" && git clone https://github.com/galsci/pysm-data "$PYSM_LOCAL_DATA"

      - name: Install basic dependencies (MPI, FFTW, poetry, IMO)
        run: |
          ./bin/install-deps.sh ${{ matrix.mpi }}
          pip install poetry==2.1 poetry-plugin-export
          mkdir -p $HOME/.config/litebird_imo
          echo -e "[[repositories]]\nlocation = \"$(pwd)/test/mock_imo/\"\nname = \"Mock IMO\"" | tee $HOME/.config/litebird_imo/imo.toml

      - name: Install litebird_sim dependencies
        run: |
          EXTRAS=""
          if [ "${{ matrix.mpi }}" != "none" ]; then
            EXTRAS="$EXTRAS -E mpi"
            if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
              EXTRAS="$EXTRAS -E brahmap"
            fi
          fi
          poetry export --without-hashes $EXTRAS -o requirements.txt
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov
        env:
          DUCC0_OPTIMIZATION: none

      - name: Tests
        run: bash ./bin/run_tests.sh

      - name: Tests MPICH
        if: ${{ matrix.mpi == 'mpich' }}
        run: |
            for proc in 1 2 ; do
              echo "Running MPI test ($MPI) with $proc processes"
              PYTHONPATH=. mpiexec -n $proc python3 ./test/test_mpi.py
              PYTHONPATH=. mpiexec -n $proc python3 ./test/test_detector_blocks.py
            done

      - name: Tests OpenMPI
        if: ${{ matrix.mpi == 'openmpi' }}
        run: |
            for proc in 1 2 ; do
              echo "Running MPI test ($MPI) with $proc processes"
              PYTHONPATH=. mpiexec -n $proc python3 ./test/test_mpi.py
              PYTHONPATH=. mpiexec -n $proc python3 ./test/test_detector_blocks.py
            done

      - name: Upload coverage report
        uses: romeovs/coverage-badge-action@v1
        with:
          output: ./coverage.svg

      - name: Comment PR with coverage
        uses: MishaKav/coverage-comment-action@v1
        with:
          coverage-file: coverage.xml
